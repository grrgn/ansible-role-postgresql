---
- name: Ensure PostgreSQL data directory exists.
  ansible.builtin.file:
    path: "{{ pg_data_dir }}"
    owner: "{{ pg_user }}"
    group: "{{ pg_group }}"
    state: directory
    mode: 0700

- name: Ensure PostgreSQL conf directory exists.
  ansible.builtin.file:
    path: "{{ pg_confs_dir }}"
    owner: "{{ pg_user }}"
    group: "{{ pg_group }}"
    state: directory
    mode: 0700

- name: Ensure PostgreSQL bin directory exists
  ansible.builtin.file:
    path: "{{ pg_bin_dir }}"
    owner: "{{ pg_user }}"
    group: "{{ pg_group }}"
    state: directory
    mode: 0700

- name: Check if db exists
  ansible.builtin.find:
    paths: "{{ pg_data_dir }}"
    file_type: any
  register: pg_data

- name: Init db
  ansible.builtin.command: "{{ pg_bin_dir }}/initdb -D {{ pg_data_dir }}"
  become: true
  become_user: "{{ pg_user }}"
  when: pg_data.matched == 0

- name: Ensure PostgreSQL is running
  ansible.builtin.service:
    name: "{{ pg_service }}"
    state: started
    enabled: true

- name: Collect settings info
  become: true
  become_user: postgres
  community.postgresql.postgresql_info:
    filter: "settings"
  register: pg_settings

- name: Set listen_addresses to
  community.postgresql.postgresql_set:
    name: listen_addresses
    value: "{{ pg_listen_addresses }}"
  become: true
  become_user: "{{ pg_user }}"
  notify: Restart PostgreSQL
  when: postgresql_settings.settings.listen_addresses.setting != postgresql_listen_addresses.replace(',', ', ')